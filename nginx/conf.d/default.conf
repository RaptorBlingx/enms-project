

# Default server configuration
#
server {
    listen 80 default_server;
    server_name _;

    # --- Location for the Frontend Application ---
    # This is the entry point, serving index.html, dpp_page.html, etc.
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }

    # <<< NEW: Location block for serving generated PDF reports ---
    # This tells Nginx that any URL like /dpp_reports/some_file.pdf
    # should be served from the specified directory inside the container.
    location /dpp_reports/ {
        # The alias must match the path we mounted in docker-compose.yml
        alias /usr/share/nginx/html/dpp_reports/;
    }
    
    # All requests to http://<server-ip>/nodered/ will be proxied
    # to the Node-RED container on port 1880.
    location /nodered/ {
        proxy_pass http://nodered:1880/;
        # Headers for WebSocket support (crucial for Node-RED editor)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }


# Send ONLY /api/devices to Node-RED
location = /api/devices {
    proxy_pass http://nodered:1880/api/devices;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

location = /api/analyze {
    proxy_pass http://nodered:1880/api/analyze;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

#
# CORRECTED: A simple passthrough proxy for OctoPrint
#
location /octoprint-proxy/ {
    # Forward the request to the internal OctoPrint server.
    # The trailing slash is important! It maps /octoprint-proxy/ to /
    proxy_pass https://10.1.1.103/;

    # Standard proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Still required for self-signed certificates
    proxy_ssl_verify off;
}

location /api/ {
    # --- THIS IS THE FIX ---
    # It now proxies requests directly to our new 'python_api' service
    # on port 5000, which is where Flask is running.
    proxy_pass http://python_api:5000/api/;

    # Standard proxy headers remain the same
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
	}
}


