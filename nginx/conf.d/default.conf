##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
    listen 80 default_server;
    server_name _;

    # --- Location for the Frontend Application ---
    # This is the entry point, serving index.html, dpp_page.html, etc.
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }
    
    # --- THIS IS THE FIX FOR NODE-RED ---
    # All requests to http://<server-ip>/nodered/ will be proxied
    # to the Node-RED container on port 1880.
    location /nodered/ {
        proxy_pass http://nodered:1880/;
        # Headers for WebSocket support (crucial for Node-RED editor)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # --- THIS IS THE FIX FOR GRAFANA ---
    # All requests to http://<server-ip>/grafana/ will be proxied
    # to the Grafana container on port 3000.
    location /grafana/ {
        proxy_pass http://grafana:3000/;
        proxy_set_header Host $host;
    }
#
# CORRECTED: A simple passthrough proxy for OctoPrint
#
location /octoprint-proxy/ {
    # Forward the request to the internal OctoPrint server.
    # The trailing slash is important! It maps /octoprint-proxy/ to /
    proxy_pass https://10.1.1.103/;

    # Standard proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Still required for self-signed certificates
    proxy_ssl_verify off;
}

location /api/ {
    # --- THIS IS THE FIX ---
    # It now proxies requests directly to our new 'python_api' service
    # on port 5000, which is where Flask is running.
    proxy_pass http://python_api:5000/api/;

    # Standard proxy headers remain the same
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
	}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}
