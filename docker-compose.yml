# ====================================================================
# Docker Compose for the ENMS Project (Corrected Ports)
# Version: 1.1
# ====================================================================

version: '3.8'

services:
  # -------------------------------------------------
  # 1. PostgreSQL Database with TimescaleDB Extension
  # -------------------------------------------------
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: enms_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=reg_ml
      - POSTGRES_USER=reg_ml
      - POSTGRES_PASSWORD=raptorblingx
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db_init:/docker-entrypoint-initdb.d
    ports:
      # Exposes the database on the standard port to the host machine.
      - "5432:5432"

  # -------------------------------------------------
  # 2. Node-RED Processing Engine
  # -------------------------------------------------
  nodered:
    build:
      context: ./node-red
    container_name: enms_nodered
    restart: unless-stopped
    ports:
      - "1880:1880"
    # The user's home directory inside the container is /data
    # We mount our configuration there. The base image is designed for this.
    volumes:
      - ./node-red:/data
    # --- THIS IS THE FIX ---
    # Instead of installing python in the image, we tell Node-RED where to find it
    # by putting the python-api container on the same network.
    # This also solves the dependency issue permanently.
    depends_on:
      - postgres
      - python_api # Make sure Node-RED starts after the Python API is ready

  # -------------------------------------------------
  # 3. Grafana Visualization Dashboard
  # -------------------------------------------------
  grafana:
    image: grafana/grafana:latest
    container_name: enms_grafana
    restart: unless-stopped
    ports:
      # Exposes the Grafana web interface to the host machine.
      - "3000:3000"
    environment:
      # This variable tells Grafana to install the MQTT plugin on startup
      - GF_INSTALL_PLUGINS=grafana-mqtt-datasource

    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards/dashboards
    depends_on:
      - postgres  

  # -------------------------------------------------
  # 4. NEW: Python API Service (Flask)
  # -------------------------------------------------
  python_api:
    build:
      context: ./python-api  # Tells Docker to use the Dockerfile in our new directory
    container_name: enms_python_api
    restart: unless-stopped
    volumes:
      # We mount the code here for live development in the override file later
      - ./python-api:/app
    depends_on:
      - postgres # It needs the database to be ready
    # We do not need to expose a port to the host, as it will only be
    # accessed internally by the Nginx container.


  # -------------------------------------------------
  # 5. Web Server (Nginx) for Frontend & API Proxy
  # -------------------------------------------------
  web_server:
    image: nginx:latest
    container_name: enms_web_server
    restart: unless-stopped
    ports:
      # --- THIS IS THE FIX ---
      # Exposes the main application on the standard HTTP port 80.
      - "80:80"
    volumes:
      # Mounts the main config file
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      # Mounts the directory containing our site-specific config (default.conf)
      - ./nginx/conf.d:/etc/nginx/conf.d
      # Mounts your frontend code
      - ./frontend:/usr/share/nginx/html
      # Mounts your images
      - ./artistic-resources:/usr/share/nginx/html/artistic-resources
    depends_on:
      - nodered

# Define the named volumes for persistent data storage
volumes:
  postgres_data:
  grafana_data:
