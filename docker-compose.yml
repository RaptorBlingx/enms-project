# ====================================================================
# FINAL Docker Compose for the ENMS Project
# Version: 2.1 (with PDF Generation Service)
# ====================================================================

version: '3.8'

# Define named volumes for persistent data
volumes:
  postgres_data:
  grafana_data:
  generated_pdfs:   # <<< NEW: Add a named volume for our PDFs

services:
  # 1. PostgreSQL Database
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: enms_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=reg_ml
      - POSTGRES_USER=reg_ml
      - POSTGRES_PASSWORD=raptorblingx
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db_init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reg_ml -d reg_ml"]
      interval: 5s
      timeout: 5s
      retries: 5

  # 2. Node-RED Service
  nodered:
    build:
      context: .
      dockerfile: ./node-red/Dockerfile
    container_name: enms_nodered
    restart: unless-stopped
    ports:
      - "1880:1880"
    volumes:
      - ./node-red:/data
      - ./python-api:/opt/enms/python-api:ro    # <- ADDED: mount python-api into container (read-only)
    environment:
      - NODE_RED_CREDENTIAL_SECRET=enms-prod-secret-2025
      - FLOWS=flows_docker.json
      - PROJECT_PY=/opt/enms/python-api         # <- ADDED: path inside container
    depends_on:
      - postgres
      - python_api

  # 3. Grafana Service
  grafana:
    image: grafana/grafana:latest
    container_name: enms_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_INSTALL_PLUGINS=grafana-mqtt-datasource
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      postgres:
        condition: service_healthy

  # 4. Python API Service
  python_api:
    build:
      context: ./python-api
    container_name: enms_python_api
    restart: unless-stopped
    volumes:
      # <<< NEW: Mount the named volume to the path where PDFs are saved
      - generated_pdfs:/app/generated_pdfs
    depends_on:
      - postgres

  # 5. Web Server (Nginx)
  web_server:
    image: nginx:latest
    container_name: enms_web_server
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d  # Use conf.d for modular configs
      - ./frontend:/usr/share/nginx/html
      - ./artistic-resources:/usr/share/nginx/html/artistic-resources
      # <<< NEW: Mount the PDF volume read-only for serving
      - generated_pdfs:/usr/share/nginx/html/dpp_reports:ro
    depends_on:
      - nodered
      - python_api
