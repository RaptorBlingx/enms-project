# ====================================================================
# FINAL Docker Compose for the ENMS Project (with .env file)
# Version: 3.1
# ====================================================================

version: '3.8'

# Define named volumes for persistent data
volumes:
  postgres_data:
  grafana_data:
  generated_pdfs:
  mosquitto_data:

services:
  # 1. PostgreSQL Database
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: enms_postgres
    restart: unless-stopped
    environment:
      # Reads variables from the .env file
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db_init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # 2. MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: enms_mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
    volumes:
      - ./node-red/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./node-red/password.txt:/mosquitto/config/password.txt:ro
      - mosquitto_data:/mosquitto/data

  # 3. Node-RED Service
  nodered:
    build:
      context: .
      dockerfile: ./node-red/Dockerfile
    container_name: enms_nodered
    restart: unless-stopped
    ports:
      - "1880:1880"
    volumes:
      - ./backend/models:/models
      - ./node-red:/data
    environment:
      # --- Database Credentials ---
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      # --- MQTT Credentials ---
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
      # --- ML Script Configuration ---
      - MODEL_DIR=/models
      # --- Standard Node-RED Config ---
      - NODE_RED_CREDENTIAL_SECRET=${NODE_RED_CREDENTIAL_SECRET}
      - FLOWS=flows_docker.json
    depends_on:
      - postgres
      - mosquitto

  # 4. ML Prediction Worker
  ml_worker:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: enms_ml_worker
    restart: unless-stopped
    volumes:
      - ./backend/models:/models:ro
    environment:
      - MODEL_DIR=/models
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=${MQTT_USERNAME}
      - MQTT_PASSWORD=${MQTT_PASSWORD}
    depends_on:
      - mosquitto
      - postgres

  # 5. Grafana Service (Unchanged)
  grafana:
    image: grafana/grafana:latest
    container_name: enms_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    # ... (grafana config is unchanged)
    volumes:
      - grafana_data:/var/lib/grafana
      # ... (grafana volumes are unchanged)
    depends_on:
      postgres:
        condition: service_healthy

  # 6. Python API Service (Unchanged)
  python_api:
    build:
      context: ./python-api
    container_name: enms_python_api
    restart: unless-stopped
    volumes:
      - generated_pdfs:/app/generated_pdfs
      - ./python-api:/app
      - ./backend:/app/backend:rw
    depends_on:
      - postgres

  # 7. Web Server (Nginx) (Unchanged)
  web_server:
    image: nginx:latest
    container_name: enms_web_server
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./frontend:/usr/share/nginx/html
      - ./artistic-resources:/usr/share/nginx/html/artistic-resources
      - generated_pdfs:/usr/share/nginx/html/dpp_reports:ro
    depends_on:
      - nodered
      - python_api
